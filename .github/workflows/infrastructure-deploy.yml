name: Deploy Infrastructure

on:
  push:
    branches: [main]
    paths:
      - 'terraform/**'
      - '.github/workflows/infrastructure-deploy.yml'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - prod
          - both

permissions:
  contents: read
  security-events: write
  actions: read

env:
  TF_VERSION: '1.5.7'
  PROJECT_ID: clgcporg10-173
  REGION: us-central1
  ZONE: us-central1-c

jobs:
  terraform-security-scan:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Checkov Terraform Scan
        uses: bridgecrewio/checkov-action@master
        with:
          directory: terraform/
          framework: terraform
          output_format: sarif
          soft_fail: true
          download_external_modules: true
      
      - name: Upload Checkov results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: results.sarif
      
      - name: tfsec Security Scan
        uses: aquasecurity/tfsec-action@v1.0.3
        with:
          working_directory: terraform/
          soft_fail: true
      
      - name: Security Summary
        run: |
          echo "## Infrastructure Security Scan Results" >> $GITHUB_STEP_SUMMARY
          echo "✅ Checkov scan completed" >> $GITHUB_STEP_SUMMARY
          echo "✅ tfsec scan completed" >> $GITHUB_STEP_SUMMARY
          echo "Note: Dev environment has intentional vulnerabilities for demonstration" >> $GITHUB_STEP_SUMMARY

  deploy-infrastructure:
    needs: terraform-security-scan
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TF_VERSION }}
      
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
      
      - name: Terraform Init
        working-directory: ./terraform
        run: terraform init
      
      - name: Import Existing Resources
        working-directory: ./terraform
        run: |
          echo "Checking for existing resources and importing them..."
          
          # Function to safely import resources
          import_if_exists() {
            local resource_type="$1"
            local resource_name="$2"
            local resource_id="$3"
            
            if terraform show -json | jq -e ".values.root_module.resources[] | select(.type == \"$resource_type\" and .name == \"$resource_name\")" > /dev/null 2>&1; then
              echo "Resource $resource_type.$resource_name already in state, skipping import"
            else
              echo "Attempting to import $resource_type.$resource_name with ID: $resource_id"
              terraform import "$resource_type.$resource_name" "$resource_id" || echo "Import failed or resource doesn't exist, will create new"
            fi
          }
          
          # Import GitHub Actions service account if it exists
          import_if_exists "google_service_account" "github_actions_sa" "projects/${{ env.PROJECT_ID }}/serviceAccounts/github-actions-sa@${{ env.PROJECT_ID }}.iam.gserviceaccount.com"
          
          # Import dev resources based on target environment
          if [[ "${{ github.event_name }}" != "workflow_dispatch" ]] || [[ "${{ github.event.inputs.environment }}" == "dev" ]] || [[ "${{ github.event.inputs.environment }}" == "both" ]]; then
            import_if_exists "google_compute_instance" "dev_mongodb" "projects/${{ env.PROJECT_ID }}/zones/${{ env.ZONE }}/instances/dev-mongodb-vm"
            import_if_exists "google_container_cluster" "dev_cluster" "projects/${{ env.PROJECT_ID }}/locations/${{ env.ZONE }}/clusters/dev-gke-cluster"
            import_if_exists "google_storage_bucket" "dev_mongodb_backups" "${{ env.PROJECT_ID }}-dev-mongodb-backups"
          fi
          
          # Import prod resources if targeting prod
          if [[ "${{ github.event.inputs.environment }}" == "prod" ]] || [[ "${{ github.event.inputs.environment }}" == "both" ]]; then
            import_if_exists "google_service_account" "prod_gke_sa" "projects/${{ env.PROJECT_ID }}/serviceAccounts/prod-gke-sa@${{ env.PROJECT_ID }}.iam.gserviceaccount.com"
            import_if_exists "google_compute_instance" "prod_mongodb" "projects/${{ env.PROJECT_ID }}/zones/${{ env.ZONE }}/instances/prod-mongodb-vm"
            import_if_exists "google_container_cluster" "prod_cluster" "projects/${{ env.PROJECT_ID }}/locations/${{ env.REGION }}/clusters/prod-gke-cluster"
            import_if_exists "google_storage_bucket" "prod_mongodb_backups" "${{ env.PROJECT_ID }}-prod-mongodb-backups"
          fi
          
          echo "Import process completed"
      
      - name: Determine Target Environment
        id: target
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
          else
            echo "environment=dev" >> $GITHUB_OUTPUT
          fi
      
      - name: Terraform Plan
        working-directory: ./terraform
        run: |
          set -e
          echo "Planning Terraform deployment for environment: ${{ steps.target.outputs.environment }}"
          
          # Define target resources for each environment
          GITHUB_ACTIONS_TARGETS="-target=google_service_account.github_actions_sa -target=google_storage_bucket_iam_member.github_actions_terraform_state -target=google_project_iam_member.github_actions_editor -target=google_project_iam_member.github_actions_security_center"
          
          DEV_TARGETS="-target=google_compute_instance.dev_mongodb -target=google_compute_firewall.dev_allow_ssh_all -target=google_compute_firewall.dev_allow_mongodb_public -target=google_container_cluster.dev_cluster -target=google_storage_bucket.dev_mongodb_backups -target=google_storage_bucket_iam_member.dev_public_read"
          
          PROD_TARGETS="-target=google_compute_instance.prod_mongodb -target=google_compute_firewall.prod_allow_iap_ssh -target=google_service_account.prod_gke_sa -target=google_project_iam_member.prod_gke_node_service_account -target=google_project_iam_member.prod_gke_logging -target=google_project_iam_member.prod_gke_monitoring -target=google_project_iam_member.prod_gke_monitoring_viewer -target=google_project_iam_member.prod_gke_gcr -target=google_project_iam_member.prod_gke_artifact_registry -target=google_container_cluster.prod_cluster -target=google_container_node_pool.prod_nodes -target=google_storage_bucket.prod_mongodb_backups"
          
          SHARED_TARGETS="-target=google_compute_network.vpc -target=google_compute_subnetwork.dev_subnet -target=google_compute_subnetwork.prod_subnet"
          
          # Plan based on target environment
          if [[ "${{ steps.target.outputs.environment }}" == "dev" ]]; then
            terraform plan $SHARED_TARGETS $GITHUB_ACTIONS_TARGETS $DEV_TARGETS -out=tfplan
          elif [[ "${{ steps.target.outputs.environment }}" == "prod" ]]; then
            terraform plan $SHARED_TARGETS $GITHUB_ACTIONS_TARGETS $PROD_TARGETS -out=tfplan
          else
            terraform plan -out=tfplan
          fi
          
          terraform show -json tfplan > tfplan.json
          echo "Plan completed successfully"
      
      - name: Terraform Apply with Error Recovery
        working-directory: ./terraform
        run: |
          set +e  # Don't exit on errors initially
          echo "Applying Terraform plan..."
          
          # First attempt
          terraform apply -auto-approve tfplan
          APPLY_EXIT_CODE=$?
          
          if [[ $APPLY_EXIT_CODE -eq 0 ]]; then
            echo "✅ Terraform apply completed successfully"
            exit 0
          fi
          
          echo "⚠️  Terraform apply encountered issues (exit code: $APPLY_EXIT_CODE)"
          echo "Attempting recovery by refreshing state and retrying..."
          
          # Refresh state and try again
          terraform refresh
          terraform plan -out=tfplan-retry
          terraform apply -auto-approve tfplan-retry
          RETRY_EXIT_CODE=$?
          
          if [[ $RETRY_EXIT_CODE -eq 0 ]]; then
            echo "✅ Terraform apply completed successfully on retry"
          else
            echo "❌ Terraform apply failed even after retry (exit code: $RETRY_EXIT_CODE)"
            echo "Manual intervention may be required"
            exit $RETRY_EXIT_CODE
          fi
      
      - name: Output Infrastructure Details
        working-directory: ./terraform
        run: |
          echo "## Deployed Infrastructure" >> $GITHUB_STEP_SUMMARY
          echo "**Target Environment:** ${{ steps.target.outputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ steps.target.outputs.environment }}" == "dev" ]]; then
            echo "### Dev Environment (Vulnerable):" >> $GITHUB_STEP_SUMMARY
            echo "- MongoDB VM: $(terraform output -raw dev_mongodb_public_ip 2>/dev/null || echo 'Not deployed')" >> $GITHUB_STEP_SUMMARY
            echo "- Public Backup URL: $(terraform output -raw dev_public_backup_url 2>/dev/null || echo 'Not available')" >> $GITHUB_STEP_SUMMARY
            echo "- GKE Cluster: dev-gke-cluster" >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ steps.target.outputs.environment }}" == "prod" ]]; then
            echo "### Prod Environment (Secure):" >> $GITHUB_STEP_SUMMARY
            echo "- MongoDB VM: Private (IAP access only)" >> $GITHUB_STEP_SUMMARY
            echo "- Backup Bucket: Private with CMEK encryption" >> $GITHUB_STEP_SUMMARY
            echo "- GKE Cluster: prod-gke-cluster (private)" >> $GITHUB_STEP_SUMMARY
          else
            echo "### Both Environments Deployed" >> $GITHUB_STEP_SUMMARY
            echo "#### Dev Environment (Vulnerable):" >> $GITHUB_STEP_SUMMARY
            echo "- MongoDB VM: $(terraform output -raw dev_mongodb_public_ip 2>/dev/null || echo 'Not deployed')" >> $GITHUB_STEP_SUMMARY
            echo "- Public Backup URL: $(terraform output -raw dev_public_backup_url 2>/dev/null || echo 'Not available')" >> $GITHUB_STEP_SUMMARY
            echo "- GKE Cluster: dev-gke-cluster" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "#### Prod Environment (Secure):" >> $GITHUB_STEP_SUMMARY
            echo "- MongoDB VM: Private (IAP access only)" >> $GITHUB_STEP_SUMMARY
            echo "- Backup Bucket: Private with CMEK encryption" >> $GITHUB_STEP_SUMMARY
            echo "- GKE Cluster: prod-gke-cluster (private)" >> $GITHUB_STEP_SUMMARY
          fi

  configure-monitoring:
    needs: deploy-infrastructure
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Configure DataDog
        run: |
          # Install DataDog agent on both clusters
          echo "Configuring DataDog monitoring..."
          # Implementation would go here
      
      - name: Configure Splunk Forwarder
        run: |
          # Configure Splunk log forwarding
          echo "Configuring Splunk integration..."
          # Implementation would go here
      
     